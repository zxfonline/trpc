// Generated by go-rpcgen. Do not modify.

package arith

import (
	"net/rpc"
)

// ArithService is generated service for Arith interface.
type ArithService struct {
	impl Arith
}

// NewArithService creates a new ArithService instance.
func NewArithService(impl Arith) *ArithService {
	return &ArithService{impl}
}

// RegisterArithService registers impl in server.
func RegisterArithService(server *rpc.Server, impl Arith) error {
	return server.RegisterName("Arith", NewArithService(impl))
}

// ArithAddRequest is a helper structure for Add method.
type ArithAddRequest struct {
	A, B int
}

// ArithAddResponse is a helper structure for Add method.
type ArithAddResponse struct {
	Result int
}

// Add is RPC implementation of Add calling it.
func (s *ArithService) Add(request *ArithAddRequest, response *ArithAddResponse) (err error) {
	response.Result, err = s.impl.Add(request.A, request.B)
	return
}

// ArithMulRequest is a helper structure for Mul method.
type ArithMulRequest struct {
	A, B int
}

// ArithMulResponse is a helper structure for Mul method.
type ArithMulResponse struct {
	Result int
}

// Mul is RPC implementation of Mul calling it.
func (s *ArithService) Mul(request *ArithMulRequest, response *ArithMulResponse) (err error) {
	response.Result, err = s.impl.Mul(request.A, request.B)
	return
}

// ArithDivRequest is a helper structure for Div method.
type ArithDivRequest struct {
	A, B int
}

// ArithDivResponse is a helper structure for Div method.
type ArithDivResponse struct {
	Result int
}

// Div is RPC implementation of Div calling it.
func (s *ArithService) Div(request *ArithDivRequest, response *ArithDivResponse) (err error) {
	response.Result, err = s.impl.Div(request.A, request.B)
	return
}

// ArithClient is generated client for Arith interface.
type ArithClient struct {
	client *rpc.Client
}

// DialArithClient connects to addr and creates a new ArithClient instance.
func DialArithClient(addr string) (*ArithClient, error) {
	client, err := rpc.Dial("tcp", addr)
	return &ArithClient{client}, err
}

// NewArithClient creates a new ArithClient instance.
func NewArithClient(client *rpc.Client) *ArithClient {
	return &ArithClient{client}
}

// Close terminates the connection.
func (_c *ArithClient) Close() error {
	return _c.client.Close()
}

// Add is part of implementation of Arith calling corresponding method on RPC server.
func (_c *ArithClient) Add(a, b int) (result int, err error) {
	_request := &ArithAddRequest{a, b}
	_response := &ArithAddResponse{}
	err = _c.client.Call("Arith.Add", _request, _response)
	return _response.Result, err
}

// Mul is part of implementation of Arith calling corresponding method on RPC server.
func (_c *ArithClient) Mul(a, b int) (result int, err error) {
	_request := &ArithMulRequest{a, b}
	_response := &ArithMulResponse{}
	err = _c.client.Call("Arith.Mul", _request, _response)
	return _response.Result, err
}

// Div is part of implementation of Arith calling corresponding method on RPC server.
func (_c *ArithClient) Div(a, b int) (result int, err error) {
	_request := &ArithDivRequest{a, b}
	_response := &ArithDivResponse{}
	err = _c.client.Call("Arith.Div", _request, _response)
	return _response.Result, err
}
